(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{334:function(n,e,t){"use strict";t.r(e);var r=t(18),o=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("$ docker exec -it mongodb bash\n# mongo\n\n> use admin;\n> db.auth('admin', '123456');\n\ndb.oauth2_client_details.save({clientId: 'bms', clientSecret: '123456', registeredRedirectUri: ['http://example.com']});\n\ndb.sys_user.save({_id: '5e3e9361264dd3090c081103',username: 'bms', password: '$2a$10$gbTTR3dQQtNIvBHqFz52aukUyb4dqN1lEBsx2VKPvGhl08fux/qVC'});\n\n")])])]),t("p",[n._v("idea mongo plugin")]),n._v(" "),t("p",[n._v("springboot 2.2.4.RELEASE > mongodb converter")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('\npackage com.ud.bms.demo.mongodb;\n\nimport org.bson.Document;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.data.convert.ReadingConverter;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.provider.OAuth2Authentication;\nimport org.springframework.security.oauth2.provider.OAuth2Request;\n\nimport java.io.Serializable;\nimport java.util.*;\n\n/**\n * <Description>\n *\n * @author : wk\n * @version : 1.0\n * @since : 2020/2/9 18:59\n * Company : Beijing Tepia (Wuhan R&D Center)\n */\n@ReadingConverter\npublic class Document2OAuth2AuthenticationConverter implements Converter<Document, OAuth2Authentication> {\n\n    @Override\n    public OAuth2Authentication convert(Document source) {\n        if (Objects.isNull(source)) {\n            return null;\n        }\n\n        Document storedRequest = this.covertDocument(source, "storedRequest");\n        OAuth2Request oAuth2Request = new OAuth2Request(\n                (Map<String, String>) storedRequest.get("requestParameters"),\n                (String) storedRequest.get("clientId"),\n                getAuthorities((List<Map<String, String>>) storedRequest.get("authorities")),\n                (Boolean) storedRequest.get("approved"),\n                this.covertSet(storedRequest, "scope"),\n                this.covertSet(storedRequest, "resourceIds"),\n                null,\n                this.covertSet(storedRequest, "responseTypes"),\n                (Map<String, Serializable>) storedRequest.get("extensions")\n        );\n\n        //\n        Document userAuthorization = this.covertDocument(source, "userAuthentication");\n        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n                userAuthorization.get("principal"),\n                userAuthorization.get("credentials"),\n                getAuthorities((List<Map<String, String>>) userAuthorization.get("authorities"))\n        );\n        return new OAuth2Authentication(oAuth2Request, token);\n    }\n\n    private Collection<GrantedAuthority> getAuthorities(List<Map<String, String>> authorities) {\n        Set<GrantedAuthority> grantedAuthorities = new HashSet<GrantedAuthority>(authorities.size());\n        for (Map<String, String> authority : authorities) {\n            grantedAuthorities.add(new SimpleGrantedAuthority(authority.get("role")));\n        }\n        return grantedAuthorities;\n    }\n\n    private Document covertDocument(Document document, String paramName) {\n        return (Document) document.get(paramName);\n    }\n\n    private Set covertSet(Document document, String paramName) {\n        return new HashSet((List) document.get(paramName));\n    }\n\n}\n\n\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("package com.ud.bms.demo.config;\n\nimport com.ud.bms.demo.mongodb.Document2OAuth2AuthenticationConverter;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.convert.CustomConversions;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.core.convert.*;\nimport org.springframework.data.mongodb.core.mapping.MongoMappingContext;\n\nimport java.util.Arrays;\n\n/**\n * <Description>\n *\n * @author : wk\n * @version : 1.0\n * @since : 2020/2/9 12:27\n * Company : Beijing Tepia (Wuhan R&D Center)\n */\n@Configuration\npublic class MongodbConfig {\n\n    @Bean\n    public MongoCustomConversions mongoCustomConversions() {\n        return new MongoCustomConversions(Arrays.asList(\n                new Document2OAuth2AuthenticationConverter()\n        ));\n    }\n\n    /**\n     *  ------------------- 暂不让其生效 --------------------\n     *\n     * @param factory\n     * @param context\n     * @param beanFactory\n     * @return\n     */\n    //    @Bean\n    public MappingMongoConverter mappingMongoConverter(MongoDbFactory factory, MongoMappingContext context, BeanFactory beanFactory) {\n\n        DbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);\n        MappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver, context);\n\n        // Don't save _class to mongo\n        mappingConverter.setTypeMapper(new DefaultMongoTypeMapper(null));\n\n        mappingConverter.setCustomConversions(beanFactory.getBean(CustomConversions.class));\n        return mappingConverter;\n    }\n\n}\n\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);